package org.d3kad3nt.sunriseClock.data.local;

import android.util.Log;

import androidx.lifecycle.LiveData;
import androidx.room.Dao;
import androidx.room.Insert;
import androidx.room.OnConflictStrategy;
import androidx.room.Query;
import androidx.room.Transaction;
import androidx.room.Update;

import org.d3kad3nt.sunriseClock.data.model.group.DbGroup;

import java.util.List;

@Dao
public interface DbGroupDao {

    String TAG = "DbGroupDao";

    /**
     * Insert group object into the database (create) or update existing group object. Case 1: Insert if neither
     * groupId (primary key) nor (endpointId and endpointGroupId) are found inside the database. Case 2: Update if
     * groupId (primary key) is given in the group object. A group with this groupId must already exist inside the
     * database. Case 3: Update if endpointId and endpointGroupId are given in the group object. A group with this
     * endpointId and endpointGroupId must already exist inside the database.
     *
     * @param obj The DbGroup object with the lightId OR (endpointId and endpointGroupId) set.
     */
    @Transaction
    default void upsert(DbGroup obj) {
        // Case 1
        long rowId = save(obj);
        if (rowId != -1L) {
            Log.d(TAG, "Inserted DbLight (row id: " + rowId + ") with endpointId " + obj.getEndpointId() + " and " +
                "endpointGroupId: " + obj.getEndpointObjectId());
            return;
        }

        // Case 2
        // Primary key found in group object.
        if (obj.getId() != 0L) {
            int rowsUpdated = updateUsingPrimaryKey(obj);
            if (rowsUpdated >= 1) {
                Log.d(TAG, rowsUpdated + " rows updated by room. Updated DbGroup with groupId: " + obj.getId());
            } else if (rowsUpdated == 0) {
                Log.w(TAG, "0 rows updated by room. This could mean that the primary key (groupId: " + obj.getId() +
                    ") could not be found in the database table.");
            }
        }
        // Case 3
        // Primary key NOT found in group object. This can happen if (all) group objects are retrieved from the
        // remote endpoint.
        // The groupId primary key is autogenerated by room, therefore it is not known to the remote endpoint.
        else if (obj.getEndpointId() != 0L && !(obj.getEndpointObjectId().equals(""))) {
            int rowsUpdated = updateUsingEndpointIdAndEndpointGroupId(obj.getEndpointId(), obj.getEndpointObjectId(),
                obj.getName());
            Log.d(TAG,
                rowsUpdated + " rows updated by room. Updated DbGroup with endpointId: " + obj.getEndpointId() +
                    " and endpointGroupId: " + obj.getEndpointObjectId());
        } else {
            Log.w(TAG, "Neither groupId nor (endpointId and endpointGroupId) were set. No update could be " +
                "performed by room!");
        }
    }

    /**
     * Insert the group into the database. If there is a conflict on insert, the group is not inserted and a special
     * value is returned.
     *
     * @param obj The DbGroup object with the endpointId and endpointGroupId set.
     * @return -1 for rows that are not inserted (will ignore the row if there is a conflict), else the row id for the
     * newly inserted item.
     */
    @Insert(onConflict = OnConflictStrategy.IGNORE)
    // An Insert DAO method that returns the inserted rows ids will return -1 for rows that are not inserted since
    // this strategy will ignore the row if there is a conflict.
    long save(DbGroup obj);

    /**
     * Use groupId primary key for SQL update. Room uses the primary key to match passed entity instances to rows in
     * the database. If there is no row with the same primary key, Room makes no changes.
     *
     * @param obj The DbGroup object with the primary key set.
     * @return Number of rows that were updated successfully.
     */
    @Update()
    int updateUsingPrimaryKey(DbGroup obj);

    /**
     * Use endpointId and endpointGroupId for (manual) SQL update statement.
     *
     * @return Number of rows that were updated successfully.
     */
    @Query("UPDATE '" + DbGroup.TABLENAME + "' SET name = :name WHERE endpoint_id = " +
        ":endpointId AND id_on_endpoint = :endpointGroupId")
    int updateUsingEndpointIdAndEndpointGroupId(long endpointId, String endpointGroupId, String name);

    @Query(value = "SELECT * FROM '" + DbGroup.TABLENAME + "' WHERE endpoint_id = :endpointId")
    LiveData<List<DbGroup>> loadAllForEndpoint(long endpointId);
}
