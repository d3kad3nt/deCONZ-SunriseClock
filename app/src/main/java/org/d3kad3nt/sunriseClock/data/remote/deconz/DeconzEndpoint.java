package org.d3kad3nt.sunriseClock.data.remote.deconz;

import androidx.annotation.IntRange;
import androidx.annotation.NonNull;
import androidx.lifecycle.LiveData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonObject;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.Expose;
import com.google.gson.reflect.TypeToken;

import org.d3kad3nt.sunriseClock.data.model.endpoint.BaseEndpoint;
import org.d3kad3nt.sunriseClock.data.model.light.RemoteLight;
import org.d3kad3nt.sunriseClock.data.remote.common.ApiResponse;
import org.d3kad3nt.sunriseClock.data.remote.deconz.typeadapter.RemoteLightListTypeAdapter;
import org.d3kad3nt.sunriseClock.data.remote.deconz.typeadapter.RemoteLightTypeAdapter;
import org.d3kad3nt.sunriseClock.util.LogUtil;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.IOException;
import java.lang.reflect.Type;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

import okhttp3.Interceptor;
import okhttp3.MediaType;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import retrofit2.Retrofit;
import retrofit2.converter.gson.GsonConverterFactory;

public class DeconzEndpoint extends BaseEndpoint {

    /**
     * From the Deconz rest api documentation: "An 'all' group is generated by the REST API by default with all lights in it.
     * This group is available at '/api/groups/0' but this id is not always 0.
     * In that case the group is also available at 'api/groups/65520'.
     */
    private static final int GROUP_ALL_ID = 65520;

    /* Path to the deconz server (Phoscon Webapp), eg. 'deconz.example.org' */
    //TODO: Change back to Uri class and write custom TypeAdapter
    @Expose
    private final String baseUrl;

    /* Port of the deconz server (Phoscon Webapp), eg. '80' */
    @Expose
    private final int port;

    /* API key for communicating with deconz API. */
    @Expose
    private final String apiKey;

    private transient IServices retrofit;

    public DeconzEndpoint(String baseUrl, int port, String apiKey) {
        this.baseUrl = baseUrl;
        this.port = port;
        this.apiKey = apiKey;
    }

    @Override
    public DeconzEndpoint init() {
        LogUtil.setPrefix("Endpoint %s: ", baseUrl);

        URI fullApiUrl = createUri();

        //Gson has to be instructed to use our custom type adapter for a list of light.
        Type remoteLightType = new TypeToken<RemoteLight>() {}.getType();
        Type remoteLightListType = new TypeToken<List<RemoteLight>>() {}.getType();

        Gson gson = new GsonBuilder().registerTypeAdapter(remoteLightType,
                new RemoteLightTypeAdapter(super.getOriginalEndpointConfig().getId()))
            .registerTypeAdapter(remoteLightListType,
                new RemoteLightListTypeAdapter(super.getOriginalEndpointConfig().getId())).create();

        // Debugging HTTP interceptor for underlying okHttp library.
        Interceptor interceptor = new Interceptor() {
            @NonNull
            @Override
            public Response intercept(@NonNull Chain chain) throws IOException {
                Request request = chain.request();
                Response response = chain.proceed(request);
                LogUtil.v("HTTP interceptor: Intercepted request to: %s led to HTTP code: %d",
                    response.request().url(), response.code());

                if (response.code() >= 200 && response.code() <= 399 && response.body() != null) {

                    // Workaround: Deconz endpoint does not return the
                    // id of a light when requesting a single
                    // light. The Gson deserializer is automatically
                    // called and cannot access the id inside of
                    // the original request. A okHttp interceptor is
                    // used to modify the JSON response from the
                    // Deconz endpoint and adds this light id.
                    if (request.header(IServices.endpointLightIdHeader) != null) {
                        LogUtil.v("HTTP interceptor: Try to set light id in JSON response as workaround.");

                        assert response.body() != null;
                        String stringJson = response.body().string();
                        JSONObject jsonObject;

                        try {
                            jsonObject = new JSONObject(stringJson);
                            jsonObject.put(IServices.endpointLightIdHeader,
                                request.header(IServices.endpointLightIdHeader));

                            MediaType contentType = response.body().contentType();
                            ResponseBody body = ResponseBody.create(contentType, String.valueOf(jsonObject));

                            return response.newBuilder().body(body).build();
                        }
                        catch (JSONException ignored) {

                        }
                    }
                }

                return response;
            }
        };
        OkHttpClient httpClient = new OkHttpClient.Builder().addInterceptor(interceptor).build();

        this.retrofit = new Retrofit.Builder()
            // Set base URL for all requests to this deconz endpoint.
            .baseUrl(fullApiUrl.toString())
            // Set custom OkHttpClient for additional logging possibilities (interception).
            .client(httpClient)
            // Set custom GSON deserializer, eg. for parsing JSON into DbLight objects.
            .addConverterFactory(GsonConverterFactory.create(gson))
            // Allow retrofit to return observable LiveData<ApiResponse> objects.
            .addCallAdapterFactory(new LiveDataCallAdapterFactory()).build()
            // Implement methods to access REST endpoints / URLs.
            .create(IServices.class);

        return this;
    }

    private URI createUri() {
        URI providedURI = URI.create(baseUrl);
        String scheme = providedURI.getScheme();
        if (scheme == null) {
            scheme = "http";
        }
        String host = providedURI.getHost();
        if (host == null) {
            // URLs like test.com are parsed as if they have no host and test.com is a path
            host = providedURI.getPath();
        }
        String path = String.format("/api/%s/", apiKey);
        try {
            return new URI(scheme, null, host, port, path, null, null);
        }
        catch (URISyntaxException e) {
            throw new IllegalArgumentException("URI can't be parsed", e);
        }
    }

    @Override
    public LiveData<ApiResponse<List<RemoteLight>>> getLights() {
        LogUtil.d("Requesting all lights");
        return this.retrofit.getLights();
    }

    @Override
    public LiveData<ApiResponse<RemoteLight>> getLight(String id) {
        LogUtil.d("Requesting single light with id %s", id);
        // Workaround: Deconz endpoint does not return the id of a light when requesting a single
        // light. The Gson deserializer is automatically called and cannot access the id inside of
        // the original request. A okHttp interceptor is used to modify the JSON response from the
        // Deconz endpoint and adds this light id.
        return this.retrofit.getLight(id, id);
    }

    @Override
    public LiveData<ApiResponse<ResponseBody>> setOnState(String endpointLightId, boolean newState) {
        LogUtil.d("Setting light state for id %s to %s", endpointLightId, newState);
        JsonObject requestBody = new JsonObject();
        requestBody.add("on", new JsonPrimitive(newState));
        return this.retrofit.updateLightState(endpointLightId, requestBody);
    }

    @Override
    public LiveData<ApiResponse<ResponseBody>> setBrightness(String endpointLightId, @IntRange(from = 0, to = 100) int brightness) {
        LogUtil.d("Setting light brightness for id %s to %d", endpointLightId, brightness);
        JsonObject requestBody = new JsonObject();
        //Deconz takes values from 0 to 255 for the brightness
        long deconzBrightness = Math.round(brightness * 2.55);
        requestBody.add("bri", new JsonPrimitive(deconzBrightness));
        return this.retrofit.updateLightState(endpointLightId, requestBody);
    }

    @Override
    public LiveData<ApiResponse<ResponseBody>> toggleOnState() {
        LogUtil.d("Toggling all lights on or off");
        JsonObject requestBody = new JsonObject();
        requestBody.add("toggle", new JsonPrimitive(true));
        return this.retrofit.updateGroupState(String.valueOf(GROUP_ALL_ID), requestBody);
    }

    @Override
    public LiveData<ApiResponse<ResponseBody>> setName(String endpointLightId, String newName) {
        LogUtil.d("Setting light name for id %s to %s on endpoint: %s", endpointLightId, newName,
            this.baseUrl);
        JsonObject requestBody = new JsonObject();
        requestBody.add("name", new JsonPrimitive(newName));
        return this.retrofit.updateLightAttributes(endpointLightId, requestBody);
    }
}
